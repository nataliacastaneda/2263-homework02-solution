/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs.cs2263.hw02;

import com.google.common.collect.Maps;
import edu.isu.cs.cs2263.hw02.data.Course;
import edu.isu.cs.cs2263.hw02.views.AppView;
import edu.isu.cs.cs2263.hw02.views.CoursesFormView;
import edu.isu.cs.cs2263.hw02.views.DisplayListView;
import edu.isu.cs.cs2263.hw02.views.WelcomeView;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j2;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kordamp.ikonli.javafx.FontIcon;
import org.kordamp.ikonli.materialdesign2.MaterialDesignF;
import org.kordamp.ikonli.materialdesign2.MaterialDesignP;

import java.util.Map;
import java.util.Optional;
import java.util.Vector;


/**
 * Main app class that launches javaFx program.
 * Used project lombok getter and setter annotations
 */
@Getter @Setter @Log4j2
public class App extends Application {

    private Vector<Course> courses;
    private AppView currentView;
    private final Map<String, AppView> views;
    private BorderPane mainLayout;
    private ChoiceBox<String> depts;
    private Scene scene;

    private final static Logger LOGGER = LogManager.getLogger(Course.class);

    /**
     * No changes from original hw02 solution
     */
    public App() {
        views = Maps.newHashMap();
        views.put("Welcome", new WelcomeView(this));
        views.put("DisplayList", new DisplayListView(this));
        views.put("CourseForm", new CoursesFormView(this));

        currentView = views.get("Welcome");
        courses = new Vector<>();
    }

    /**
     * The main entry point for all JavaFX applications.
     * The start method is called after the init method has returned,
     * and after the system is ready for the application to begin running.
     *
     * <p>
     * NOTE: This method is called on the JavaFX Application Thread.
     * </p>
     *
     * @param primaryStage the primary stage for this application, onto which
     *                     the application scene can be set.
     *                     Applications may create other stages, if needed, but they will not be
     *                     primary stages.
     * @throws Exception if something goes wrong
     *
     * Changes made from original hw02 solution:
     * added Ids for various labels and buttons for querying during testing
     * implemented 'val' annotation from project lombok for label and button local variables
     */
    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Course View");

        val display = new Button("Display (dept.)");

        display.setId("deptDisplayButton");//added button ID

        display.setOnAction(event -> {
           displayList();
        });
        display.setGraphic(FontIcon.of(MaterialDesignF.FORMAT_LIST_TEXT, 20));

        val newCourse = new Button("New Course");

        newCourse.setId("newCourseButton");//added button ID

        newCourse.setOnAction(event -> {
            showCourseForm();
        });
        newCourse.setGraphic(FontIcon.of(MaterialDesignP.PLAYLIST_PLUS, 20));

        val exit = new Button("Exit");

        exit.setId("exitButton");//added button ID

        exit.setOnAction(event -> {
            exit();
        });
        exit.setGraphic(FontIcon.of(MaterialDesignP.POWER, 20));

        depts = new ChoiceBox<>();

        depts.setId("deptsChoiceBox");//added choice box ID

        depts.setOnAction(event -> {
            int selectedIndex = depts.getSelectionModel().getSelectedIndex();
            // update the display button
        });
        for (int i = 0; i < Course.CODES.length; i++) {
            depts.getItems().add(String.format("%s (%s)", Course.DEPTS[i], Course.CODES[i]));
        }
        depts.getSelectionModel().select(0);

        mainLayout = new BorderPane();

        val exitPane = new BorderPane();
        exitPane.setPadding(new Insets(10,10,10,10));
        exitPane.setRight(exit);

        mainLayout.setBottom(exitPane);

        val choiceLayout = new BorderPane();
        choiceLayout.setPadding(new Insets(10,10,10,10));
        Label deptLbl = new Label("Departments: ");
        choiceLayout.setLeft(deptLbl);
        choiceLayout.setCenter(depts);
        BorderPane.setAlignment(depts, Pos.CENTER_LEFT);
        BorderPane.setAlignment(deptLbl, Pos.CENTER_RIGHT);

        val buttons = new HBox(10, display, newCourse);
        HBox.setMargin(display, new Insets(10, 0, 10, 10));
        HBox.setMargin(newCourse, new Insets(10, 10, 10, 0));

        val topLayout = new BorderPane();
        topLayout.setCenter(choiceLayout);
        topLayout.setRight(buttons);

        mainLayout.setTop(topLayout);

        mainLayout.setCenter(currentView.getView());

        scene = new Scene(mainLayout, 600, 300);
        primaryStage.setScene(scene);
        FontIcon fi = FontIcon.of(MaterialDesignF.FLASK_EMPTY, 32);

        primaryStage.show();
    }

    /**
     * The class below is commented out because of the @Getter
     */
    /*public Vector<Course> getCourses() {
        return courses;
    }*/

    /**
     * No changes from hw02 solution
     * @param viewName
     */
    public void setView(String viewName) {
        mainLayout.getChildren().remove(currentView.getView());
        currentView = views.get(viewName);
        mainLayout.setCenter(currentView.getView());
        mainLayout.requestLayout();
    }

    /**
     * No changes from hw02 solution
     */
    public void showCourseForm() {
        setView("CourseForm");
        currentView.updateData();
    }

    /**
     * No changes from hw02 solution
     */
    public void displayList() {
        setView("DisplayList");
        currentView.updateData();
    }

    /**
     * Changes made from original hw02 solution:
     * added Id for exit button for querying during testing
     * implemented 'val' annotation from project lombok for label and button local variables
     */
    public void exit() {
        val alert = new Alert(Alert.AlertType.CONFIRMATION);

        alert.setTitle("Confirmation");
        alert.setContentText("Are you sure you want to exit?");
        val confirmExit = (Button) alert.getDialogPane().lookupButton(ButtonType.OK);
        confirmExit.setId("confirmExit");

        Optional<ButtonType> result = alert.showAndWait();
        result.ifPresent(btnType -> {
            if (btnType.getButtonData().isDefaultButton())
                System.exit(0);
        });
    }

    /**
     * No changes from hw02 solution
     */
    public int getSelectedDepartment() {
        return depts.getSelectionModel().getSelectedIndex();
    }

    /**
     * No changes from hw02 solution
     */
    public void showWelcome() {
        setView("Welcome");
    }

    /**
     * No changes from hw02 solution
     */
    public void addCourse(Course course) {
        courses.add(course);
    }

    /**
     * No changes from hw02 solution
     */
    public static void main(String[] args) {
        LOGGER.debug("Debug Message Logged");
        LOGGER.info("Info Message Logged");
        LOGGER.error("Error Message Logged", new NullPointerException("NullError"));
        Application.launch(args);
    }
}
